Problem
There is a circular track of length MM consisting of MM checkpoints and MM bidirectional roads such that each road has a length of 11 unit.



Chef is currently at checkpoint AA and wants to reach checkpoint BB. Find the minimum length of the road he needs to travel.

Input Format
First line will contain TT, the number of test cases. Then the test cases follow.
Each test case contains a single line of input, three integers A, B,A,B, and MM - the initial checkpoint, the final checkpoint, and the total number of checkpoints respectively.
Output Format
For each test case, output the minimum length Chef needs to travel.

Constraints
1 \leq T \leq 10001≤T≤1000
2 \leq M \leq 10^92≤M≤10 
9
 
1 \leq A, B \leq M1≤A,B≤M
A \neq BA=B
Sample 1:
Input
Output
4
1 3 100
1 98 100
40 30 50
2 1 2
2
3
10
1
Explanation:
Test Case 11: Chef can go from 11 to 33 as: 1 \rightarrow 21→2 and then 2 \rightarrow 32→3. Thus, total length travelled is 22 units.

Test Case 22: Chef can go from 11 to 9898 as: 98 \leftarrow 99 \leftarrow 100 \leftarrow 198←99←100←1. Thus, minimum distance travelled is 33 units.

Test Case 33: Chef can go from 4040 to 3030 as: 30 \leftarrow 31 \leftarrow 32 \leftarrow \dots \leftarrow 39 \leftarrow 4030←31←32←⋯←39←40. Thus, minimum distance travelled is 1010 units.

Test Case 44: Chef can go from 22 to 11 as: 1 \leftarrow 21←2. Thus, minimum distance travelled is 11 unit.

Solution
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc = new Scanner(System.in);
     int t =sc.nextInt();
		
		while(t-->0){
		    int x =sc.nextInt();
		    int y =sc.nextInt();
		    int z =sc.nextInt();
            int a =Math.abs(x-y);
            int b= Math.min(z-x,x)+Math.min(z-y,y); 
            System.out.println(Math.min(a,b));
}	
	}
}
