Problem
You have a grid with 
�
N rows and 
�
M columns. You have two types of tiles — one of dimensions 
2
×
2
2×2 and the other of dimensions 
1
×
1
1×1. You want to cover the grid using these two types of tiles in such a way that:

Each cell of the grid is covered by exactly one tile; and
The number of 
1
×
1
1×1 tiles used is minimized.
Find the minimum number of 
1
×
1
1×1 tiles you have to use to fill the grid.

Input Format
The first line of input will contain a single integer 
�
T, denoting the number of test cases.
Each test case consists of a single line containing two space-separated integers 
�
,
�
N,M.
Output Format
For each test case, print on a new line the minimum number of 
1
×
1
1×1 tiles needed to fill the grid.

Constraints
1
≤
�
≤
1
0
4
1≤T≤10 
4
 
1
≤
�
,
�
≤
1
0
4
1≤N,M≤10 
4
 
Sample 1:
Input
Output
4
1 1
4 5
6 8
3 2
1
4
0
2

Explanation:
Test case 
1
1: There is only one square in the grid, and it must be filled with a single 
1
×
1
1×1 tile.

Test case 
2
2: One way of tiling the grid using 
1
×
1
1×1 tiles exactly 
4
4 times is as follows:

sample 2
Test case 
3
3: One way of tiling the grid using no 
1
×
1
1×1 tiles is as follows:

sample 3
Test case 
4
4: One way of tiling the grid using 
1
×
1
1×1 tiles exactly twice is:

sample 4

Solution
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc= new Scanner(System.in);
		int t=sc.nextInt();
		while(t--> 0){
		    int t1=sc.nextInt();
		    int t2=sc.nextInt();
		   
		     if(t1%2==0&&t2%2==0){
		        System.out.println(0);
		    }else if(t1%2!=0&&t2%2==0){
		        System.out.println(t2);
		    }else if(t1%2==0&&t2%2!=0){
		        System.out.println(t1);
		    }
		    else{
		        System.out.println(((t1%2)*t2)+((t2%2)*t1)-1);
		    }
		}
	}
}
